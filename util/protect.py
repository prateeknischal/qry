import base64
import os
import pathlib

from cryptography.fernet import Fernet
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC


def file_to_bytes(filename):
    """This function is used to convert the image file into an array of bytes

    Arguments:
        filename (str): path to the file

    Returns:
        bytes: the contents of the file as a single byte array"""

    fp = pathlib.Path(filename)
    if not fp.is_file():
        print ("The file {} does not exist !!".format(filename))
        return 1

    img = []
    with open(filename, "rb") as f:
        img = f.read()

    return img

def protect(plain, password):
    """This function is used to encrypt the byte string "plain" using the
    "password" byte string. It uses a 32-byte key derived ,from the password using
    PBKDF2-HMAC, to encrypt the plain text using Fernet Algorithm.

    Arguments:
        plain (bytes): the plaintext as a byte string
        password (bytes): the password as a byte string

    Returns:
        tuple (bytes, bytes): Returns the salt and token as byte strings"""

    salt = os.urandom(16)
    try:
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length = 32,
            salt = salt,
            iterations = 100000,
            backend = default_backend()
        )

        cipher = Fernet(base64.urlsafe_b64encode(kdf.derive(password)))
        token = cipher.encrypt(plain)
        return salt, token
    except cryptography.exceptions.UnsupportedAlgorithm as ua:
        sys.stderr.write("UnsupportedAlgorithm Exception\n")
        sys.stderr.flush()
    except TypeError as te:
        sys.stderr.write("{}".format(te))
        sys.stderr.flush()

    return b"", b""


def access(salt, token, password):
    """This function is used to decrypt the ciphertext generated by the "protect"
    function. It takes in the salt, ciphertext and the password to decryptself.

    ARguments:
        salt (bytes): the salt value that was used to derive the key from password
        token (bytes): cypher text from Fernet
        password (bytes): password used to derive the key using PBKDF2

    Returns:
        bytes: returns the plaintext as a byte string"""
    try:
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length = 32,
            salt = salt,
            iterations = 100000,
            backend = default_backend()
        )

        cipher = Fernet(base64.urlsafe_b64encode(kdf.derive(password)))
        plain = cipher.decrypt(token)

        return plain
    except cryptography.exceptions.UnsupportedAlgorithm as ua:
        sys.stderr.write("UnsupportedAlgorithm Exception\n")
        sys.stderr.flush()
    except TypeError as te:
        sys.stderr.write("{}".format(te))
        sys.stderr.flush()

    return b""
